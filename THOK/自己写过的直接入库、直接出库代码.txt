

		private void AutoGenerateInBIll(string productCode, decimal quantity, string inBillNo)
		{
			//NeedAllotProduct needAllotProduct = new NeedAllotProduct(new VProduct(productCode, ""), quantity);
			var productInfo = ProductService.GetProductInfoOfDefaultUnit(productCode);
			var otherProductCanInPresetLocation = ParameterService.GetParameterValueBy<bool>("OtherProductCanInPresetLocation", true);

			var warehouse = WarehouseRepository.GetWarehouse();
			var regionArray = warehouse.GetRegionsOfActivate().Where(t => t.RegionType == RegionType.TemporaryProduct).ToArray();
			var shelfCodes = warehouse.GetShelvesOfActivate().Select(t => t.ShelfCode).ToArray();
			var locationsOfAllotIn = LocationRepository.GetLocationsOfAllotIn(warehouse.WarehouseCode, regionArray.Select(t => t.RegionCode).ToArray(), shelfCodes);
			var targetLocation = CalculateLocationOfInboundService.ApplyLocation(productInfo, quantity, regionArray.FirstOrDefault().RegionName, locationsOfAllotIn, otherProductCanInPresetLocation);
			
			var pallet = targetLocation.ApplyEmptyPallet();

			var inBill = this.GetInBill(warehouse.WarehouseCode, billTypeCode, inBillNo);

			var inBillDetail = InBillFactory.CreateInBillDetail(productInfo.Product, quantity, productInfo.Unit, productInfo.ProductYear);
			var inBillDetailId = inBill.AddInBillDetail_V1(inBillDetail);
			inBill.TryVerify_V1("System");

			var inBillAllot = InBillFactory.CreateInBillAllot(inBillDetailId, inBillDetail.Product, inBillDetail.Unit, inBillDetail.ProductYear);
			inBill.AddInBillAllot_V1(inBillAllot);

			var storage = new Storage(
					id: Guid.NewGuid(),
					locationCode: targetLocation.LocationCode,
					palletId: pallet.Id,
					productCode: productInfo.Product.ProductCode,
					productName: productInfo.Product.ProductName,
					storageTime: DateTime.MinValue,
					inBillNo: inBill.InBillNo,
					inFrozenQuantity: quantity
				);

			decimal outQuantity = 0;
			inBill.Allot_V1(inBillAllot.InBillDetailId, inBillAllot.Id, targetLocation.LocationCode, pallet.Id, storage.Id, storage.InFrozenQuantity, "");
			inBill.ConfirmAllotOfValidate_V1();
			inBill.ApplyPlanOfValidate_V1(inBillAllot.Id);
			var autoAllotStorageId = new Guid();
			targetLocation.AddInQuantity(productCode, " productName", true, "cargoOwnerCode", " cargoOwnerName", " userDefine", " inBatch", inBill.InBillNo, " productYear"
				, 1, pallet.Id, quantity, quantity, out autoAllotStorageId, out outQuantity);
		}

		private InBill GetInBill(string warehouseCode, string billTypeCode, string inBillNo)
		{
			InBill inBill = null;

			if (!string.IsNullOrEmpty(inBillNo))
			{
				inBill = InBillRepository.GetBy(inBillNo);

				if (inBill.IsSettled())
				{
					throw new Exception($"入库单号：{inBillNo}已结单不能使用，请检查！");
				}
			}
			else
			{
				inBill = InBillRepository.TryGetInBillOfUnSettled(billTypeCode);
			}

			if (inBill != null)
			{
				return inBill;
			}
			else
			{
				inBillNo = GenerateSequenceService.GenerateIdentity("inBillNo");

				inBill = InBillFactory.CreateMoveBillOfSystemCreate(inBillNo, billTypeCode, warehouseCode);
				InBillRepository.Add(inBill);
				return inBill;
			}
		}